#? stdtmpl | standard
#template `!`(idx: untyped): untyped =
#  row[idx]
#end template
#proc genRSSHeaders(c: TForumData): string =
#  result = ""
<link href="${c.req.makeUri("/threadActivity.xml")}" title="Thread activity"
  type="application/atom+xml" rel="alternate">
<link href="${c.req.makeUri("/postActivity.xml")}" title="Post activity"
  type="application/atom+xml" rel="alternate">
#end proc
#
#proc genThreadsRSS(c: TForumData): string =
#  result = ""
#  const query = sql"""SELECT A.id, A.name,
#    strftime('%Y-%m-%dT%H:%M:%SZ', (A.modified)),
#    C.name, B.content, B.id
#    FROM thread AS A, post AS B, person AS C
#    WHERE A.id = b.thread AND B.author = C.id
#    ORDER BY B.id DESC LIMIT ?"""
#  const threadId = 0
#  const name = 1
#  const threadDate = 2
#  const postAuthor = 3
#  const postContent = 4
#  const postId = 5
#  let frontQuery = c.req.makeUri("/")
#  let recent = getValue(db, sql"""SELECT
#    strftime('%Y-%m-%dT%H:%M:%SZ', (modified)) FROM thread
#    ORDER BY modified DESC LIMIT 1""")
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>${config.name} thread activity</title>
    <link href="${c.req.makeUri("/threadActivity.xml")}" rel="self" />
    <link href="${frontQuery}" />
    <id>${frontQuery}</id>
    <updated>${recent}</updated>
# for row in rows(db, query, 10):
    <entry>
        <title>${xmlEncode(!name)}</title>
        <id>urn:entry:${!threadid}</id>
        # let url = c.genThreadUrl(threadid = !threadid) &
        #   "#" & !postId
        <link rel="alternate" type="text/html"
          href="${c.req.makeUri(url)}"/>
        <published>${!threadDate}</published>
        <updated>${!threadDate}</updated>
        <author><name>${xmlEncode(!postAuthor)}</name></author>
        <content type="html"
>${xmlEncode(markdownToHtml(!postContent))}</content>
    </entry>
# end for
</feed>
#end proc
#
#proc genPostsRSS(c: TForumData): string =
#  result = ""
#  const query = sql"""SELECT A.id, B.name, A.content, A.thread, T.name,
#    strftime('%Y-%m-%dT%H:%M:%SZ', A.creation),
#    A.creation, A.position
#    FROM post AS A, person AS B, thread AS T
#    WHERE A.author = B.id
#          AND T.id = A.thread
#    ORDER BY A.id DESC LIMIT 10"""
#  const postId = 0
#  const postAuthor = 1
#  const postContent = 2
#  const postThread = 3
#  const postHeader = 4
#  const postRssDate = 5
#  const postHumanDate = 6
#  const postPosition = 7
#  let frontQuery = c.req.makeUri("/")
#  let recent = getValue(db, sql"""SELECT
#    strftime('%Y-%m-%dT%H:%M:%SZ', creation) FROM post
#    ORDER BY creation DESC LIMIT 1""")
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>${config.name} post activity</title>
    <link href="${c.req.makeUri("/postActivity.xml")}" rel="self" />
    <link href="${frontQuery}" />
    <id>${frontQuery}</id>
    <updated>${recent}</updated>
# for row in rows(db, query):
    <entry>
        <title>${xmlEncode(!postHeader)}</title>
        <id>urn:entry:${!postId}</id>
        #var page = (parseInt(!postPosition) div postPerPage())*postPerPage()
        #var url = (if page > 0: c.genThreadUrl(threadid = !postThread) & "/s/" & $page & "#" & !postId
        #  else: c.genThreadUrl(threadid = !postThread) & "#" & !postId )
        <link rel="alternate" type="text/html"
          href="${c.req.makeUri(url)}"/>
        <published>${!postRssDate}</published>
        <updated>${!postRssDate}</updated>
        <author><name>${xmlEncode(!postAuthor)}</name></author>
        <content type="html"
>${xmlEncode(markdownToHtml(!postContent))}</content>
    </entry>
# end for
</feed>
#end proc
